<?php

namespace backend\models;

use common\components\CommonFunction;
use Yii;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;

/**
 * This is the model class for table "{{%user_team}}".
 *
 * @property string $id
 * @property string $user_id
 * @property string $title
 * @property integer $sort
 * @property string $is_leader
 * @property string $type
 */
class UserTeam extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%user_team}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['user_id', 'sort', 'is_leader', 'type','team_id','user_type'], 'integer'],
            [['title'], 'string', 'max' => 100],
        ];
    }

    public  $user_ids;

    public static $user_type=[
        1=>'普通成员',
        2=>'组委',
        3=>'组长'
    ];

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'user_id' => '用户',
            'title' => '名称',
            'sort' => '排序',
            'is_leader' => '组长',
            'type' => '类型',
            'user_type'=>'类型'
        ];
    }

    public function getUser(){
        return $this->hasOne(User::class,['id'=>'user_id']);
    }

    public function beforeSave($insert)
    {

       if($this->team_id){
           $team=Team::findOne($this->team_id);
           $this->type=$team['type'];
       }
       if($this->isNewRecord){
           $team=Team::findOne($this->team_id);
           $book=TeamBook::find()->where(['book_id'=>$team->book_id,'team_id'=>$team->id])->all();
           foreach ($book as $k=>$v){
               $new=new UserCheck();
               $new->user_id=$this->user_id;
               $new->book_id=$v['book_id'];
               $new->relation_id=$team->id;
               $new->detail_id=$v['detail_id'];
               $new->time=$v['time'];
               $new->type=$team->type;
               $new->save();
           }
       }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    //删除后处理
    public function afterDelete()
    {
        parent::beforeDelete();
        UserCheck::deleteAll(['user_id'=>$this->user_id,'relation_id'=>$this->team_id]);
        //在这里做删除前的事情
        return true;
    }
}
