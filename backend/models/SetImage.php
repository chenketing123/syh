<?php

namespace backend\models;

use common\components\CommonFunction;
use common\components\Helper;
use Yii;
use yii\behaviors\TimestampBehavior;
use yii\data\Pagination;

/**
 * This is the model class for table "{{%set_image}}".
 *
 * @property string $id
 * @property string $title
 * @property string $subtitle
 * @property string $image
 * @property integer $sort
 * @property integer $type
 * @property string $href
 */
class SetImage extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%set_images}}';
    }

    public function behaviors()
    {
        return [
            TimestampBehavior::className(),

        ];
    }

    public $file;



    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['file'],'file'],
            [['sort','type','category_id','up_time'], 'integer'],
            [['title', 'subtitle', 'image', 'href','image2','image3','english_title','image_title','image_subtitle','image2_title','image2_subtitle','image3_title','image3_subtitle','image_4','image_4_subtitle','image_4_title'], 'string', 'max' => 255],
            [['info','more_image','describe','price','market_price','company_name','logo','company_url','appid','href2','status','video','info2','file_value','created_at'],'safe']
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => '标题',
            'subtitle' => '副标题',
            'image' => '图片',
            'image2' => '图片2',
            'image3' => '图片3',
            'image_4' => '图片4',
            'sort' => '排序',
            'href' => '链接1',
            'type'=>'类型',
            'info'=>'内容',
            'info2'=>'内容2',
            'file'=>'文件',
            'file_value'=>'文件地址',
            'more_image'=>'多图',
            'category_id'=>'分类',
            'is_index'=>'首页展示',
            'describe'=>'描述',
            'up_time'=>'文件上传时间',
            'english_title'=>'英文标题',
            'image_title'=>'图片标题',
            'image_subtitle'=>'图片副标题',
            'image2_title'=>'图片2标题',
            'image2_subtitle'=>'图片2副标题',
            'image3_title'=>'图片3标题',
            'image3_subtitle'=>'图片3副标题',
            'image_4_title'=>'图片4标题',
            'image_4_subtitle'=>'图片4副标题',
            'href2'=>'链接2',
            'created_at'=>'添加时间',
            'appid'=>'小程序appid',
            'price'=>'活动价',
            'market_price'=>'市场价',
            'status'=>'状态',
            'company_name'=>'企业名称',
            'logo'=>'企业logo',
            'company_url'=>'企业链接',
            'video'=>'视频',


        ];
    }

    public function beforeSave($insert)
    {
        if($this->image){
            $this->image=CommonFunction::unsetImg($this->image);
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
    public static function getList($where,$limit=0){
        if($limit>0){
            $model=SetImage::find()->where($where)->andWhere(['language'=>Yii::$app->language])->limit($limit)->orderBy('sort asc,id desc')->all();
        }else{
            $model=SetImage::find()->where($where)->andWhere(['language'=>Yii::$app->language])->orderBy('sort asc,id desc')->all();
        }

        return $model;
    }

    public static function getOne($where){
        $model=SetImage::find()->where($where)->andWhere(['language'=>Yii::$app->language])->orderBy('sort asc,id desc')->one();
        return $model;
    }

    public static function getImage($sign){

        $model=SetImage::find()->where(['sign'=>$sign])->andWhere(['language'=>Yii::$app->language])->orderBy('sort asc,id desc')->one();
        if(Helper::isMobile()){
            return $model->image2;
        }else{
            return $model->image;
        }

    }

    public function getCategory(){
        return $this->hasOne(SetCategory::className(),['id'=>'category_id']);
    }

    //分页查询
    public static function getModelPage($where,$pageSize){
        $data   = SetImage::find()->where($where)->andWhere(['language'=>Yii::$app->language]);
        $pages  = new Pagination(['totalCount' =>$data->count(), 'pageSize' =>$pageSize]);
        $models = $data->offset($pages->offset)->orderBy('sort asc,id desc')->limit(10)->all();
        $return=[];
        $return['data']=$models;
        $return['pages']=$pages;
        return $return;

    }

    //上一条
    public static function BeforeOne($id){
        $model=SetImage::findOne($id);
        $before=SetImage::find()->where(['type'=>$model->type,'category_id'=>$model->category_id])
            ->andWhere(['language'=>Yii::$app->language])
            ->andWhere(['or',['<','sort',$model->sort],['and',['>','id',$model->id],['sort'=>$model->sort]]])
            ->orderBy('sort desc,id asc')->one();
        return $before;
    }

    //下一条

    public static function AfterOne($id){
        $model=SetImage::findOne($id);
        $after=SetImage::find()->where(['type'=>$model->type,'category_id'=>$model->category_id])
            ->andWhere(['language'=>Yii::$app->language])
            ->andWhere(['or',['>','sort',$model->sort],['and',['<','id',$model->id],['sort'=>$model->sort]]])
            ->orderBy('sort asc,id desc')->one();
        return $after;
    }

    public static function add_model($message){

        $re=[
            'error'=>0,
            'message'=>''
        ];
        $model=new SetImage();
        $model->setAttributes($message);
        if(!$model->save()){
            $error=$model->getFirstErrors();
            $re['error']=1;
            $re['message']=reset($error);
        }
        return $re;
    }


    public static function update_model($message){

        $re=[
            'error'=>0,
            'message'=>''
        ];
        if(!$message['id']){
            $re['error']=1;
            $re['message']='id不正确';
        }else{
            $model=SetImage::findOne($message['id']);;
            if(!$model){
                $re['error']=1;
                $re['message']='id不正确';
            }else{
                $model->setAttributes($message);
                if(!$model->save()){
                    $error=$model->getFirstErrors();
                    $re['error']=1;
                    $re['message']=reset($error);
                }
            }


        }
        return $re;

    }


}
