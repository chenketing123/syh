<?php

namespace backend\models;

use common\components\CommonFunction;
use Yii;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;

/**
 * This is the model class for table "{{%goods_category}}".
 *
 * @property integer $id
 * @property string $code_id
 * @property string $title
 * @property string $parent_id
 * @property string $level
 * @property string $sort
 * @property string $created_at
 * @property string $updated_at
 * @property string $image
 * @property string $is_show
 */
class GoodsCategory extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%goods_category}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['title'], 'required'],
            [['parent_id', 'level', 'sort', 'is_show','is_index','is_recommend'], 'integer'],
            [['code_id'], 'string', 'max' => 20],
            [['title'], 'string', 'max' => 50],
            [['image'], 'string', 'max' => 255],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'code_id' => '编码',
            'title' => '名称',
            'parent_id' => '上级分类',
            'level' => '分类等级',
            'sort' => '排序',
            'created_at' => '添加时间',
            'updated_at' => '修改时间',
            'image' => '图片',
            'is_show' => '是否上架',
        ];
    }

    /**
    * @return array
    */
    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['created_at', 'updated_at'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['updated_at'],
                ],
            ],
        ];
    }


    public function beforeSave($insert)
    {

        if($this->image){
            $this->image=CommonFunction::unsetImg($this->image);
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }





    public static function add_model($message){

        $re=[
            'error'=>0,
            'message'=>''
        ];
        $model=new GoodsCategory();
        $model->setAttributes($message);
        if($model->parent_id>0){
            $parent=GoodsCategory::findOne($model->parent_id);
            if(!$parent){
                $re['error']=1;
                $re['message']='上级id不正确';
            }else{
                $model->level=$parent->level+1;
            }
        }
        if(!$model->save()){
            $error=$model->getFirstErrors();
            $re['error']=1;
            $re['message']=reset($error);
        }
        return $re;
    }


    public static function update_model($message){

        $re=[
            'error'=>0,
            'message'=>''
        ];
        if(!$message['id']){
            $re['error']=1;
            $re['message']='id不正确';
        }else{
            $model=GoodsCategory::findOne($message['id']);;
            if(!$model){
                $re['error']=1;
                $re['message']='id不正确';
            }else{
                $model->setAttributes($message);
                if($model->parent_id>0){
                    $parent=GoodsCategory::findOne($model->parent_id);
                    if(!$parent){
                        $re['error']=1;
                        $re['message']='上级id不正确';
                    }else{
                        $model->level=$parent->level+1;
                    }
                }
                if(!$model->save()){
                    $error=$model->getFirstErrors();
                    $re['error']=1;
                    $re['message']=reset($error);
                }
            }


        }
        return $re;

    }

    public function getChildren(){
        return $this->hasMany(GoodsCategory::class,['id'=>'parent_id']);
    }



}
