<?php

namespace backend\models;

use common\components\CommonFunction;
use Yii;
use yii\base\Exception;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;

/**
 * This is the model class for table "{{%goods_comment}}".
 *
 * @property string $id
 * @property string $order_number
 * @property string $goods_id
 * @property string $user_id
 * @property string $number
 * @property string $image
 * @property string $content
 * @property string $user_image
 * @property string $created_at
 * @property string $updated_at
 * @property string $name
 * @property string $order_id
 * @property string $detail_id
 */
class GoodsComment extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%goods_comment}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['order_number', 'image', 'content'], 'required'],
            [['goods_id', 'user_id', 'number', 'created_at', 'updated_at', 'order_id', 'detail_id'], 'integer'],
            [['order_number', 'content', 'user_image', 'name'], 'string', 'max' => 255],
            [['image'], 'string', 'max' => 1000],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'order_number' => '订单编号',
            'goods_id' => 'Goods ID',
            'user_id' => 'User ID',
            'number' => '分数',
            'image' => '图片',
            'content' => '内容',
            'user_image' => '头像',
            'created_at' => '添加时间',
            'updated_at' => '修改时间',
            'name' => '名称',
            'order_id' => '订单id',
            'detail_id' => '详情id',
        ];
    }

    /**
    * @return array
    */
    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['created_at', 'updated_at'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['updated_at'],
                ],
            ],
        ];
    }

    public function beforeSave($insert)
    {

        if($this->user_image){
            $this->user_image=CommonFunction::unsetImg($this->user_image);
        }
        if($this->image){
            $arr=explode(',',$this->image);
            $value=[];
            foreach ($arr as $k=>$v){
                $value[]=CommonFunction::unsetImg($v);
            }
            $this->image=implode(',',$value);
        }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }




    public static function add_model($message,$user_id){
        $re=[
            'error'=>0,
            'message'=>'',
        ];
        $user=User::findOne($user_id);
        if(!$user){
            $re['error']=1;
            $re['message']='用户id不正确';
            return $re;
        }
        $transaction = Yii::$app->db->beginTransaction();
        try{
                foreach ($message as $k=>$v){
                    $new=new GoodsComment();
                    $new->setAttributes($v);
                    $order=Order::findOne($v['order_id']);
                    $detail=OrderDetail::findOne($v['detail_id']);
                    if(!$order){
                        throw new Exception('订单id不正确');
                    }elseif (!$detail){
                        throw new Exception('详情id不正确');
                    }elseif ($order->status!=4){
                        throw new Exception('订单状态不正确');
                    }else{
                        $new->user_id=$user_id;
                        $new->user_image=$user->getImg();
                        $new->name=$user['name'];
                        $new->order_number=$order['order_number'];
                        $new->goods_id=$detail['goods_id'];
                        if(!$new->save()){
                            $errors=$new->getFirstErrors();
                            throw new Exception(reset($errors));
                        }
                    }

                }
            $order->status=5;
            if(!$order->save()){
                $errors=$order->getFirstErrors();
                throw new Exception(reset($errors));
            }
            $transaction->commit();

        }catch (Exception $e) {

            $transaction->rollBack();

            $re['error']=1;
            $re['message']=$e->getMessage();

        }


        return $re;

    }

    //处理数据
    public static function  model_message($model){
        $arr=[];
        foreach ($model as $k=>$v){
            if($k=='created_at' or $k=='updated_at'){
                if($v>0){
                    $arr[$k]=date('Y-m-d H:i',$v);
                }else{
                    $arr[$k]='';
                }
            }elseif ( $k=='image' or $k=='user_image'){

                $arr_image=explode(',',$v);
                $arr_image_value=[];
                foreach ($arr_image as $k2=>$v2){
                    $arr_image_value[]=CommonFunction::setImg($v2);
                }
                $arr[$k]=implode(',',$arr_image_value);
            }else{
                $arr[$k]=$v;
            }
        }
        $arr['goods']=[];
        $detail=OrderDetail::findOne($model['detail_id']);
        $order=Order::findOne($model['order_id']);
        if($detail){
            if($detail['sku']){
                $sku=implode(',',unserialize($detail['sku']));
            }else{
                $sku='';
            }
            $arr['goods']=[
                'image'=>CommonFunction::setImg($detail['image']),
                'name'=>$detail['title'],
                'number'=>$detail['number'],
                'price'=>$detail['price'],
                'sku'=>$sku,
                'order_number'=>$order['order_number'],
                'order_time'=>date('Y-m-d',$order['created_at']),
            ];
        }



        return $arr;
    }
}
